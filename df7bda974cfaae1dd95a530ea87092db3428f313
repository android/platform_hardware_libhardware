{
  "comments": [
    {
      "key": {
        "uuid": "ad33cd7d_42631277",
        "filename": "include/hardware/vibrator.h",
        "patchSetId": 8
      },
      "lineNbr": 41,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2014-01-10T16:38:31Z",
      "side": 1,
      "message": "Can you specify what is supposed to happen if the function is called several times before the first call\u0027s timeout has expired? I.e. do the timeout accumulate, or does the one with the older expiration date prevails.\n\nThanks.",
      "revId": "df7bda974cfaae1dd95a530ea87092db3428f313",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ede2251a_2f1b85ca",
        "filename": "include/hardware/vibrator.h",
        "patchSetId": 8
      },
      "lineNbr": 41,
      "author": {
        "id": 1012411
      },
      "writtenOn": "2014-01-10T17:33:06Z",
      "side": 1,
      "message": "I\u0027m not sure we can do that: it depends on the implementation.  Even the default implementation relies on the \"timed_output\" driver class, which does not guarantee anything in that regard.",
      "parentUuid": "ad33cd7d_42631277",
      "revId": "df7bda974cfaae1dd95a530ea87092db3428f313",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad33cd7d_223fee39",
        "filename": "include/hardware/vibrator.h",
        "patchSetId": 8
      },
      "lineNbr": 45,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2014-01-10T16:46:52Z",
      "side": 1,
      "message": "This is a bit ambiguous, it would be nicer if this explained that on failure this returns -1 and errno can be read for the exact error.",
      "revId": "df7bda974cfaae1dd95a530ea87092db3428f313",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0dd6993f_705f2ecf",
        "filename": "include/hardware/vibrator.h",
        "patchSetId": 8
      },
      "lineNbr": 45,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2014-01-10T17:00:47Z",
      "side": 1,
      "message": "Actually, I now think that returning a negative errno code is simpler for everyone. Sorry for the noise, but can you change the implementation to be consistent and clarify this with something like:\n\n  @return 0 on success, negative errno code on failure.\n\nThanks.",
      "parentUuid": "ad33cd7d_223fee39",
      "revId": "df7bda974cfaae1dd95a530ea87092db3428f313",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad33cd7d_22660e88",
        "filename": "include/hardware/vibrator.h",
        "patchSetId": 8
      },
      "lineNbr": 50,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2014-01-10T16:38:31Z",
      "side": 1,
      "message": "Can you clarify why this is needed exactly? I assume it\u0027s to turn the vibrator off before the timeout has expired, but it would be nice if this was explicit.",
      "revId": "df7bda974cfaae1dd95a530ea87092db3428f313",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0dd6993f_10c7ca2f",
        "filename": "include/hardware/vibrator.h",
        "patchSetId": 8
      },
      "lineNbr": 50,
      "author": {
        "id": 1012411
      },
      "writtenOn": "2014-01-10T17:33:06Z",
      "side": 1,
      "message": "Same issue as for vibrator_on() but I\u0027ll try to clarify it",
      "parentUuid": "ad33cd7d_22660e88",
      "revId": "df7bda974cfaae1dd95a530ea87092db3428f313",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ede2251a_8fa8392e",
        "filename": "modules/vibrator/Android.mk",
        "patchSetId": 8
      },
      "lineNbr": 21,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2014-01-10T16:38:31Z",
      "side": 1,
      "message": "s/implemenation/implementation/ :-)",
      "revId": "df7bda974cfaae1dd95a530ea87092db3428f313",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ede2251a_4ff5b138",
        "filename": "modules/vibrator/Android.mk",
        "patchSetId": 8
      },
      "lineNbr": 21,
      "author": {
        "id": 1012411
      },
      "writtenOn": "2014-01-10T17:33:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ede2251a_8fa8392e",
      "revId": "df7bda974cfaae1dd95a530ea87092db3428f313",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ede2251a_afa3f552",
        "filename": "modules/vibrator/vibrator.c",
        "patchSetId": 8
      },
      "lineNbr": 29,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2014-01-10T16:38:31Z",
      "side": 1,
      "message": "First, this should be log10(), not log() here\n\nSecond, this is not portable, since it relies on the compiler\u0027s ability to compute this value at compile time. Otherwise, this will not compile in C, and generate a static initializer in C++, which seems really wasteful.\n\nBetter just use a constant like 32 which should be large enough (for 32-bits, the real value is 20, iirc, but don\u0027t take my word for it).",
      "revId": "df7bda974cfaae1dd95a530ea87092db3428f313",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ede2251a_2f982513",
        "filename": "modules/vibrator/vibrator.c",
        "patchSetId": 8
      },
      "lineNbr": 29,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2014-01-10T16:41:55Z",
      "side": 1,
      "message": "I meant 20 should be enough for 64-bits. Ahh.",
      "parentUuid": "ede2251a_afa3f552",
      "revId": "df7bda974cfaae1dd95a530ea87092db3428f313",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad33cd7d_8274ba16",
        "filename": "modules/vibrator/vibrator.c",
        "patchSetId": 8
      },
      "lineNbr": 29,
      "author": {
        "id": 1012411
      },
      "writtenOn": "2014-01-10T17:33:06Z",
      "side": 1,
      "message": "ok, let\u0027s go for 20 - nobody in their right mind will ever want to vibrate for billions and billions of years anyway, right ? :)",
      "parentUuid": "ede2251a_2f982513",
      "revId": "df7bda974cfaae1dd95a530ea87092db3428f313",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad33cd7d_e2302671",
        "filename": "modules/vibrator/vibrator.c",
        "patchSetId": 8
      },
      "lineNbr": 34,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2014-01-10T16:38:31Z",
      "side": 1,
      "message": "Could you use TEMP_FAILURE_RETRY here and below to allow looping around EINTR?\n\nReminder: Do not use it with close, on Linux, if close() returns EINTR, the file descriptor is always already closed anyway :-(",
      "revId": "df7bda974cfaae1dd95a530ea87092db3428f313",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad33cd7d_02366a6a",
        "filename": "modules/vibrator/vibrator.c",
        "patchSetId": 8
      },
      "lineNbr": 52,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2014-01-10T16:38:31Z",
      "side": 1,
      "message": "Why? Returning -1 seems to be more consistent given that you would return it on line 60 if the write() fails.",
      "range": {
        "startLine": 52,
        "startChar": 16,
        "endLine": 52,
        "endChar": 21
      },
      "revId": "df7bda974cfaae1dd95a530ea87092db3428f313",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0dd6993f_90905a31",
        "filename": "modules/vibrator/vibrator.c",
        "patchSetId": 8
      },
      "lineNbr": 52,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2014-01-10T16:41:55Z",
      "side": 1,
      "message": "I now realize you tried to fix a bug in the previous AOSP implementation, I still think a -1 would be more consistent here. Thanks for your understanding :-)",
      "parentUuid": "ad33cd7d_02366a6a",
      "range": {
        "startLine": 52,
        "startChar": 16,
        "endLine": 52,
        "endChar": 21
      },
      "revId": "df7bda974cfaae1dd95a530ea87092db3428f313",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0dd6993f_30a766a5",
        "filename": "modules/vibrator/vibrator.c",
        "patchSetId": 8
      },
      "lineNbr": 58,
      "author": {
        "id": 1000411
      },
      "writtenOn": "2014-01-10T16:38:31Z",
      "side": 1,
      "message": "This may erase errno if the close fails for some reason, which isn\u0027t desirable if the client really wants to know why a write() failed.",
      "revId": "df7bda974cfaae1dd95a530ea87092db3428f313",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}